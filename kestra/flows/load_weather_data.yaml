
id: load_weather_data
namespace: aemetelt
description: |
  Best to add a label `backfill:true` from the UI to track executions created via a backfill.
  
tasks:
  - id: dlt_load_weather_data
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:      
      type: io.kestra.plugin.scripts.runner.docker.Docker    
    containerImage: python:3.13
    beforeCommands:
      - pip install "dlt[bigquery]"
    env:
      LOAD_BQ_WEATHER_STATIONS__CREDENTIALS: "{{ kv('GCP_CREDS') }}"
      LOAD_BQ_CLIMATIC_VALUES__CREDENTIALS: "{{ kv('GCP_CREDS') }}"
    warningOnStdErr: false
    script: |
      from dlt.sources.filesystem import readers
      import dlt
      from dlt.destinations.adapters import bigquery_adapter

      def load_data_to_bq(bucket_url, pipeline_name, table_name, partition_field=None, cluster_field=None):
          print(f"Starting load for {table_name}...")
          pipeline = dlt.pipeline(
              pipeline_name=pipeline_name,
              destination="bigquery", 
              dataset_name="{{ kv('GCP_WEATHER_DATASET') }}"
          )
          
          parquet_reader = readers(bucket_url, file_glob="**/*.parquet").read_parquet()
          load_info = pipeline.run(bigquery_adapter(parquet_reader.with_name(table_name), autodetect_schema=True, partition=partition_field), 
                                  write_disposition="replace")
          print(load_info)
          print(pipeline.last_trace.last_normalize_info)

      def load_weather_stations_to_bq():
          bucket_url = "{{ kv('GCP_BUCKET_NAME') }}/weather_stations"
          load_data_to_bq(bucket_url, "load_bq_weather_stations", "weather_stations", cluster_field="provincia")

      def load_climatic_values_to_bq():
          bucket_url = "{{ kv('GCP_BUCKET_NAME') }}/climatic_values"
          load_data_to_bq(bucket_url, "load_bq_climatic_values", "climatic_values", partition_field="ano", cluster_field="indicativo")

      load_weather_stations_to_bq()
      load_climatic_values_to_bq()

triggers:
  - id: dlt_extract_data
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs:
      year: 2024
